# -*- coding: utf-8 -*-
"""ARA-CNNfinal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xkVVyJzDIrTkxXlI_7tM0sGbFkLgf6fT
"""

!pip  install -U torch torchvision
!pip install git+https://github.com/facebookresearch/fvcore.git
!pip install  tensorflow-gpu

!pip install --upgrade --force-reinstall

!pip check

import shutil

shutil.rmtree('/usr/local/lib/python3.7/dist-packages/~etectron2')

import torch, torchvision
torch.__version__

from google.colab import drive
drive.mount('/content/myMount/', force_remount = True)

cd myMount/MyDrive/PRIVATE/DIZIN

!git clone https://github.com/facebookresearch/detectron2 detectron2_repo
!pip install  -e detectron2_repo

#!python -c 'import site; print(site.getsitepackages())'

!dir

# You may need to restart your runtime prior to this, to let your installation take effect
# Some basic setup
# Setup detectron2 logger
import detectron2
from detectron2.utils.logger import setup_logger
setup_logger()

# import some common libraries
import matplotlib.pyplot as plt
import numpy as np
import cv2
#from google.colab.patches import cv2_imshow

# import some common detectron2 utilities
from detectron2.engine import DefaultPredictor
from detectron2.config import get_cfg
from detectron2.utils.visualizer import Visualizer
from detectron2.data import MetadataCatalog, DatasetCatalog

MetadataCatalog.clear()
DatasetCatalog.clear()

from detectron2.data.datasets import register_coco_instances

register_coco_instances("my_dataset_tooth_drtrain", {}, "/content/myMount/MyDrive/PRIVATE/DIZIN/drtrain.json", "/content/myMount/MyDrive/PRIVATE/DIZIN/dataset/")
register_coco_instances("my_dataset_tooth_ourtrain", {}, "/content/myMount/MyDrive/PRIVATE/DIZIN/trainv3.json", "/content/myMount/MyDrive/PRIVATE/DIZIN/dataset/")
register_coco_instances("my_dataset_tooth_ourtest", {}, "/content/myMount/MyDrive/PRIVATE/DIZIN/valv3.json", "/content/myMount/MyDrive/PRIVATE/DIZIN/dataset/")
register_coco_instances("my_dataset_tooth_drtest", {}, "/content/myMount/MyDrive/PRIVATE/DIZIN/drtest.json", "/content/myMount/MyDrive/PRIVATE/DIZIN/dataset/")

tooth_metadata_drtest = MetadataCatalog.get("my_dataset_tooth_drtest")
dataset_dicts_drtest = DatasetCatalog.get("my_dataset_tooth_drtest")

tooth_metadata_dr = MetadataCatalog.get("my_dataset_tooth_drtrain")
dataset_dicts_dr = DatasetCatalog.get("my_dataset_tooth_drtrain")

tooth_metadata_our = MetadataCatalog.get("my_dataset_tooth_ourtrain")
dataset_dicts_our = DatasetCatalog.get("my_dataset_tooth_ourtrain")

tooth_metadata_ourtest = MetadataCatalog.get("my_dataset_tooth_ourtest")
dataset_dicts_ourtest = DatasetCatalog.get("my_dataset_tooth_ourtest")

import random
from google.colab.patches import cv2_imshow
from matplotlib import pyplot as plt
import cv2
import os

TEMPDATA = tooth_metadata_drtest

for d in random.sample(dataset_dicts_our, 3 ):
    #print((d["file_name"]).replace('\\','/'))
    #break
    img = cv2.imread( d["file_name"])
    #img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    #cv2_imshow(img)
    #break
    visualizer = Visualizer(img[:, :, ::-1], metadata=TEMPDATA)
    vis = visualizer.draw_dataset_dict(d)
    cv2_imshow(vis.get_image()[:, :, ::-1])
    #plt.imshow(vis.get_image()[:, :, ::-1])
    #plt.show()

cd myMount/MyDrive/PRIVATE/DIZIN

import shutil

#shutil.rmtree('/content/myMount/MyDrive/PRIVATE/DIZIN/output_dr')
shutil.rmtree('/content/myMount/MyDrive/PRIVATE/DIZIN/our3output')

from detectron2.engine import DefaultTrainer
from detectron2.config import get_cfg
import os

cfg_our = get_cfg()
cfg_our.merge_from_file("./detectron2_repo/configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml")
cfg_our.DATASETS.TRAIN = ("my_dataset_tooth_ourtrain",)
#cfg_our.DATASETS.TEST = ("my_dataset_tooth_ourtest",) 

#cfg_our.MODEL.MASK_ON = True
cfg_our.DATASETS.TEST = ()

cfg_our.SOLVER.STEPS = [] 
cfg_our.DATALOADER.NUM_WORKERS = 2
cfg_our.OUTPUT_DIR = "our3output"

cfg_our.MODEL.WEIGHTS = "detectron2://COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl"  # initialize from model zoo
#cfg_our.MODEL.WEIGHTS = os.path.join(cfg_our.OUTPUT_DIR, "model_final.pth")
#var olan modeli yukle
#cfg_our.TEST.EVAL_PERIOD = 200
cfg_our.SOLVER.IMS_PER_BATCH = 2
cfg_our.SOLVER.BASE_LR = 0.002
cfg_our.SOLVER.MAX_ITER = 2000
cfg_our.MODEL.ROI_HEADS.BATCH_SIZE_PER_IMAGE = 64
cfg_our.MODEL.ROI_HEADS.NUM_CLASSES =  4 
#cfg_our.MODEL.DEVICE='cpu'

os.makedirs(cfg_our.OUTPUT_DIR, exist_ok=True)
trainer_our = DefaultTrainer(cfg_our)
trainer_our.resume_or_load(resume=False)
trainer_our.train()

cfg_our.MODEL.WEIGHTS = os.path.join(cfg_our.OUTPUT_DIR, "model_final.pth")
cfg_our.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.75   # set the testing threshold for this model
predictor_our = DefaultPredictor(cfg_our)

from detectron2.evaluation import COCOEvaluator, inference_on_dataset
from detectron2.data import build_detection_test_loader

evaluator_our = COCOEvaluator("my_dataset_tooth_ourtest", output_dir="./our3output")
val_loader_our = build_detection_test_loader(cfg_our, "my_dataset_tooth_ourtest")

print(inference_on_dataset(predictor_our.model, val_loader_our, evaluator_our))

# another equivalent way to evaluate the model is to use `trainer.test`

from detectron2.utils.visualizer import ColorMode
#from matplotlib import pyplot as plt
import random
#plt.rcParams["figure.figsize"] = (20,10)
from google.colab.patches import cv2_imshow


#for d in dataset_dicts_test: 
for d in random.sample(dataset_dicts_ourtest, 15):    
    testimage = cv2.imread(d["file_name"])
    outputs = predictor_our(testimage)
    v = Visualizer(testimage[:, :, ::-1],
                   metadata=tooth_metadata_ourtest, 
                   scale=0.8, 
                   instance_mode=ColorMode.IMAGE_BW   # remove the colors of unsegmented pixels
    )
    v = v.draw_instance_predictions(outputs["instances"].to("cpu"))
    cv2_imshow(v.get_image()[:, :, ::-1])
    #cv2.waitKey(0)
    #plt.imshow(v.get_image()[:, :, ::-1])
    #plt.show()

!zip -r ./ourmodelfile.zip ./our3output
from google.colab import files
#files.download("./modfile.zip")

from detectron2.engine import DefaultTrainer
from detectron2.config import get_cfg
import os

cfg_dr = get_cfg()
cfg_dr.merge_from_file("./detectron2_repo/configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml")
cfg_dr.DATASETS.TRAIN = ("my_dataset_tooth_drtrain",)
#cfg_dr.DATASETS.TEST = ("my_dataset_tooth_drtest",) 
cfg_dr.DATASETS.TEST = ()

#cfg_dr.SOLVER.STEPS = ()
cfg_dr.SOLVER.STEPS = []

cfg_dr.DATALOADER.NUM_WORKERS = 2
cfg_dr.MODEL.WEIGHTS = "detectron2://COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl"  # initialize from model zoo
#cfg.MODEL.WEIGHTS = os.path.join(cfg.OUTPUT_DIR, "model_final.pth")
#var olan modeli yukle

cfg_dr.SOLVER.IMS_PER_BATCH = 2
cfg_dr.SOLVER.BASE_LR = 0.002
cfg_dr.SOLVER.MAX_ITER = 2000
cfg_our.MODEL.ROI_HEADS.BATCH_SIZE_PER_IMAGE = 64

cfg_dr.MODEL.ROI_HEADS.NUM_CLASSES =  4


#cfg_dr.TEST.EVAL_PERIOD = 200


#cfg_dr.MODEL.DEVICE='cpu'
cfg_dr.OUTPUT_DIR = "dr1output"

os.makedirs(cfg_dr.OUTPUT_DIR, exist_ok=True)
trainer_dr = DefaultTrainer(cfg_dr)
trainer_dr.resume_or_load(resume=False)
trainer_dr.train()

cfg_dr.MODEL.WEIGHTS = os.path.join(cfg_dr.OUTPUT_DIR, "model_final.pth")
cfg_dr.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.75   # set the testing threshold for this model
predictor_dr = DefaultPredictor(cfg_dr)

from detectron2.utils.visualizer import ColorMode
#from matplotlib import pyplot as plt
import random
#plt.rcParams["figure.figsize"] = (20,10)
from google.colab.patches import cv2_imshow


#for d in dataset_dicts_test: 
for d in random.sample(dataset_dicts_drtest, 15):    
    testimage = cv2.imread(d["file_name"])
    outputs = predictor_dr(testimage)
    v = Visualizer(testimage[:, :, ::-1],
                   metadata=tooth_metadata_drtest, 
                   scale=0.8, 
                   instance_mode=ColorMode.IMAGE_BW   # remove the colors of unsegmented pixels
    )
    v = v.draw_instance_predictions(outputs["instances"].to("cpu"))
    cv2_imshow(v.get_image()[:, :, ::-1])
    #cv2.waitKey(0)
    #plt.imshow(v.get_image()[:, :, ::-1])
    #plt.show()

from detectron2.evaluation import COCOEvaluator, inference_on_dataset
from detectron2.data import build_detection_test_loader
evaluator_dr = COCOEvaluator("my_dataset_tooth_drtest", output_dir="./dr1output")
val_loader_dr = build_detection_test_loader(cfg_dr, "my_dataset_tooth_drtest")
print(inference_on_dataset(predictor_dr.model, val_loader_dr, evaluator_dr))
# another equivalent way to evaluate the model is to use `trainer.test`

!zip -r ./drmodelfile.zip ./dr1output
from google.colab import files
#files.download("./modelfile.zip")

!dir

import time
times = []
for i in range(20):
    start_time = time.time()
    outputs = predictor(im)
    delta = time.time() - start_time
    times.append(delta)
mean_delta = np.array(times).mean()
fps = 1 / mean_delta
print("Average(sec):{:.2f},fps:{:.2f}".format(mean_delta, fps))